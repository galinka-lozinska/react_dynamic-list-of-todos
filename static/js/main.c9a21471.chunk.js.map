{"version":3,"sources":["components/TodoList/TodoList.jsx","components/TodoList/TodoListTypes.js","api/api.js","components/CurrentUser/UsersIdTypes.jsx","components/CurrentUser/CurrentUser.jsx","components/NavMenuTodo/NavMenuTodo.jsx","App.jsx","index.js"],"names":["TodoList","PropTypes","arrayOf","shape","userId","number","title","string","completed","bool","func","todos","updateSelectUserId","className","map","todo","key","uuid","type","checked","readOnly","onClick","BASE_URL","request","fetch","then","response","json","result","data","getTodos","getUser","CurrentUser","state","user","id","name","email","phone","this","props","setState","React","PureComponent","NavMenuTodo","initialTodos","clickedButton","handleUpdateButton","value","sortedTodosList","newTodosList","filter","toLowerCase","includes","updateTodos","randomizeTodos","randomTodos","i","length","j","Math","floor","random","temp","placeholder","onChange","event","target","href","App","selectedUserId","newTodos","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c9a21471.chunk.js","sourcesContent":["import React from 'react';\nimport uuid from 'uuid-random';\nimport './TodoList.scss';\nimport { TodoListTypes } from './TodoListTypes';\n\nexport const TodoList = ({ todos, updateSelectUserId }) => (\n  <div className=\"TodoList\">\n    <h2>Todos:</h2>\n\n    <div className=\"TodoList__list-container\">\n      <ul className=\"TodoList__list\">\n        {todos.map(todo => (\n          <li className=\"TodoList__item TodoList__item--unchecked\" key={uuid()}>\n            <label>\n              <input\n                type=\"checkbox\"\n                checked={todo.completed}\n                readOnly\n              />\n              <p>{todo.title}</p>\n            </label>\n\n            <button\n              className=\"\n                TodoList__user-button\n                TodoList__user-button--selected\n                button\n              \"\n              type=\"button\"\n              onClick={() => updateSelectUserId(todo.userId)}\n            >\n              {`User#${todo.userId}`}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  </div>\n);\n\nTodoList.propTypes = TodoListTypes;\n","import PropTypes from 'prop-types';\n\nexport const TodoListTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      userId: PropTypes.number,\n      title: PropTypes.string,\n      completed: PropTypes.bool,\n    }),\n  ),\n  updateSelectUserId: PropTypes.func,\n  updateTodos: PropTypes.func,\n};\n","const BASE_URL = 'https://mate-api.herokuapp.com/';\n\nconst request = (key = 'todos') => fetch(`${BASE_URL}${key}`)\n  .then(response => response.json())\n  .then(result => result.data);\n\nexport const getTodos = () => request();\n\nexport const getUser = userId => request(`users/${userId}`);\n","import PropTypes from 'prop-types';\n\nexport const UsersIdTypes = {\n  userId: PropTypes.number,\n};\n","import React from 'react';\nimport './CurrentUser.scss';\nimport { UsersIdTypes } from './UsersIdTypes';\n\nimport { getUser } from '../../api/api';\n\nexport class CurrentUser extends React.PureComponent {\n  state= {\n    user: {\n      id: 0,\n      name: '',\n      email: '',\n      phone: '',\n    },\n  }\n\n  componentDidMount() {\n    getUser(this.props.userId)\n      .then(user => this.setState({ user }));\n  }\n\n  componentDidUpdate() {\n    if (this.state.user.id !== this.props.userId) {\n      getUser(this.props.userId)\n        .then(user => this.setState({ user }));\n    }\n  }\n\n  render() {\n    const { id, name, email, phone } = this.state.user;\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>{`Selected user: ${id}`}</span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">{name}</h3>\n        <p className=\"CurrentUser__email\">{email}</p>\n        <p className=\"CurrentUser__phone\">{phone}</p>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = UsersIdTypes;\n","import React from 'react';\nimport './NavMenuTodo.scss';\n\nimport { TodoListTypes } from '../TodoList/TodoListTypes';\nimport { getTodos } from '../../api/api';\n\nexport class NavMenuTodo extends React.PureComponent {\n  state ={\n    initialTodos: [],\n    clickedButton: 'All',\n  }\n\n  componentDidMount() {\n    getTodos()\n      .then((todos) => {\n        this.setState({\n          initialTodos: todos,\n        });\n      });\n  }\n\n  handleUpdateButton = (value) => {\n    this.setState({\n      clickedButton: value,\n    });\n  }\n\n  sortedTodosList = (value) => {\n    const newTodosList = this.props.todos.filter(\n      todo => (\n        todo.title !== null\n          ? todo.title.toLowerCase().includes(value.toLowerCase())\n          : false),\n    );\n\n    this.props.updateTodos(newTodosList);\n  }\n\n  randomizeTodos = () => {\n    const { todos, updateTodos } = this.props;\n    const randomTodos = [...todos];\n\n    for (let i = randomTodos.length - 1; i > 0; i -= 1) {\n      const j = Math.floor(Math.random() * i);\n      const temp = randomTodos[i];\n\n      randomTodos[i] = randomTodos[j];\n      randomTodos[j] = temp;\n    }\n\n    updateTodos(randomTodos);\n  }\n\n  render() {\n    const { updateSelectUserId, updateTodos } = this.props;\n    const { clickedButton, initialTodos } = this.state;\n\n    return (\n      <div className=\"nav-menu\">\n        <input\n          type=\"text\"\n          placeholder=\"Tittle....\"\n          onChange={event => this.sortedTodosList(event.target.value)}\n        />\n        <div>\n          <ul className=\"filters\">\n            <li>\n              <a\n                href=\"#/all\"\n                name=\"All\"\n                className={clickedButton === 'All' ? 'selected' : ''}\n                onClick={(event) => {\n                  updateTodos(initialTodos);\n                  this.handleUpdateButton(event.target.name);\n                }}\n              >\n                All\n              </a>\n            </li>\n            <li>\n              <a\n                href=\"#/active\"\n                name=\"Active\"\n                className={clickedButton === 'Active' ? 'selected' : ''}\n                onClick={(event) => {\n                  updateTodos(\n                    initialTodos.filter(todo => todo.completed === false),\n                  );\n                  this.handleUpdateButton(event.target.name);\n                }}\n              >\n                Active\n              </a>\n            </li>\n            <li>\n              <a\n                href=\"#/completed\"\n                name=\"Completed\"\n                className={clickedButton === 'Completed' ? 'selected' : ''}\n                onClick={(event) => {\n                  updateTodos(\n                    initialTodos.filter(todo => todo.completed === true),\n                  );\n                  this.handleUpdateButton(event.target.name);\n                }}\n              >\n                Completed\n              </a>\n            </li>\n          </ul>\n          <button\n            type=\"button\"\n            className=\"clear-completed\"\n            onClick={() => updateSelectUserId(0)}\n          >\n            Clear completed\n          </button>\n          <button\n            type=\"button\"\n            className=\"randomize\"\n            onClick={this.randomizeTodos}\n          >\n            Randomize\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nNavMenuTodo.propTypes = TodoListTypes;\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { NavMenuTodo } from './components/NavMenuTodo';\n\nimport { getTodos } from './api/api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  componentDidMount() {\n    getTodos()\n      .then((todos) => {\n        this.setState({\n          todos,\n        });\n      });\n  }\n\n  updateTodos = (newTodos) => {\n    this.setState({\n      todos: newTodos,\n    });\n  }\n\n  updateSelectUserId = (value) => {\n    this.setState({\n      selectedUserId: value,\n    });\n  }\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <NavMenuTodo\n            todos={todos}\n            updateSelectUserId={this.updateSelectUserId}\n            updateTodos={this.updateTodos}\n          />\n          <TodoList\n            todos={todos}\n            updateSelectUserId={this.updateSelectUserId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser userId={selectedUserId} />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}